package fr.pingtimeout.adventofcode2021;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import org.junit.Test;

public class Day13Test extends DayTest {
  @Test
  public void should_do_something() throws URISyntaxException, IOException {
    Day13 day = new Day13();
    List<String> lines = readInput(day);
    assertThat(day.partOne(lines)).isEqualTo(17);
  }

  @Test
  public void should_apply_y_fold() throws URISyntaxException, IOException {
    Day13 day = new Day13();
    char[][] grid =
        new char[][] {
          {'.', '.', '.', '#', '.', '.', '#', '.', '.', '#', '.'},
          {'.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '#', '.', '.', '.', '.', '#', '.', '#', '#', '.'},
          {'.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'},
          {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.'},
        };
    assertThat(day.applyFold(grid, "fold along y=7"))
        .isEqualTo(
            new char[][] {
              {'#', '.', '#', '#', '.', '.', '#', '.', '.', '#', '.'},
              {'#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
              {'.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'},
              {'#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
              {'.', '#', '.', '#', '.', '.', '#', '.', '#', '#', '#'},
              {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
              {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
            });
  }

  @Test
  public void should_apply_x_fold() throws URISyntaxException, IOException {
    Day13 day = new Day13();
    char[][] grid =
        new char[][] {
          {'#', '.', '#', '#', '.', '.', '#', '.', '.', '#', '.'},
          {'#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '#'},
          {'#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
          {'.', '#', '.', '#', '.', '.', '#', '.', '#', '#', '#'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
        };
    assertThat(day.applyFold(grid, "fold along x=5"))
        .isEqualTo(
            new char[][] {
              {'#', '#', '#', '#', '#'},
              {'#', '.', '.', '.', '#'},
              {'#', '.', '.', '.', '#'},
              {'#', '.', '.', '.', '#'},
              {'#', '#', '#', '#', '#'},
              {'.', '.', '.', '.', '.'},
              {'.', '.', '.', '.', '.'},
            });
  }

  @Test
  public void should_apply_complicated_folds() throws URISyntaxException, IOException {
    Day13 day = new Day13();
    char[][] grid =
        new char[][] {
          {'#', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'#', '.', '.', '.', '.', '#', '.', '.', '.'},
          {'#', '.', '#', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '#', '.', '#', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'#', '#', '#', '#', '.', '#', '#', '#', '#'},
          {'.', '#', '.', '#', '.', '.', '#', '.', '#'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
          {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        };
    assertThat(day.applyFold(grid, "fold along y=4"))
        .isEqualTo(
            new char[][] {
              {'#', '.', '.', '.', '.', '.', '.', '.', '.'},
              {'#', '.', '.', '.', '.', '#', '.', '.', '.'},
              {'#', '#', '#', '#', '.', '.', '#', '.', '#'},
              {'#', '#', '#', '#', '.', '#', '#', '#', '#'},
            });
    assertThat(day.applyFold(grid, "fold along x=4"))
        .isEqualTo(
            new char[][] {
              {'#', '.', '.', '.'},
              {'#', '.', '.', '#'},
              {'#', '.', '#', '.'},
              {'.', '#', '.', '#'},
              {'.', '.', '.', '.'},
              {'#', '#', '#', '#'},
              {'#', '#', '#', '#'},
              {'.', '.', '.', '.'},
              {'.', '.', '.', '.'},
            });
  }
}
